-- SQLBook: Code
SELECT FIRST_NAME as WORKER_NAME from `Worker` 
-- SQLBook: Code
Select (FIRST_NAME) from Worker;
-- SQLBook: Code
Select distinct DEPARTMENT from Worker;
-- SQLBook: Code
Select substring(FIRST_NAME,1,3) from Worker;

-- SQLBook: Code
Select RTRIM(FIRST_NAME) from Worker;
-- SQLBook: Code
Select LTRIM(DEPARTMENT) from Worker;
-- SQLBook: Code
Select distinct length(DEPARTMENT) from Worker;
-- SQLBook: Code
Select REPLACE(FIRST_NAME,'a','A') from Worker;
-- SQLBook: Code
Select CONCAT(FIRST_NAME, ' ', LAST_NAME) AS 'COMPLETE_NAME' from Worker;
-- SQLBook: Code
#Write an SQL query to print all Worker details from the Worker table order by FIRST_NAME Ascending and DEPARTMENT Descending.
Select * from Worker order by FIRST_NAME asc,DEPARTMENT desc;
-- SQLBook: Code
#Write an SQL query to print details of workers excluding first names, “Vipul” and “Satish” from the Worker table.
Select * from Worker where FIRST_NAME not in ('Vipul','Satish');
-- SQLBook: Code
#Write an SQL query to print details of Workers with DEPARTMENT name as “Admin”.
select * from `Worker` where `DEPARTMENT`='Admin'
-- SQLBook: Code
#Write an SQL query to print details of the Workers whose FIRST_NAME contains ‘a’.
select * from `Worker` where `FIRST_NAME` LIKE 'a%'
-- SQLBook: Code
#Write an SQL query to print details of the Workers whose FIRST_NAME ends with ‘h’ and contains six alphabets.
Select * from Worker where FIRST_NAME like '_____h';
-- SQLBook: Code
#Write an SQL query to print details of the Workers whose SALARY lies between 100000 and 500000.
Select * from Worker where SALARY between 100000 and 500000;
-- SQLBook: Code
#Write an SQL query to print details of the Workers whose SALARY less than 100000;
select * from `Worker` where `SALARY` <100000;
-- SQLBook: Code
#Write an SQL query to print details of the Workers who joined in Feb’2014.
Select * from Worker where year(JOINING_DATE) = 2014 and month(JOINING_DATE) = 2;
-- SQLBook: Code
# Write an SQL query to fetch the count of employees working in the department ‘Admin’.
SELECT COUNT(*) from `Worker` WHERE `DEPARTMENT`='Admin'
-- SQLBook: Code
#Write an SQL query to fetch worker names with salaries >= 50000 and <= 100000.
SELECT CONCAT(FIRST_NAME, ' ', LAST_NAME) As Worker_Name, Salary
FROM `Worker` WHERE Salary BETWEEN 50000 AND 100000 

-- SQLBook: Code
#Write an SQL query to fetch the no. of workers for each department in descending order.
SELECT DEPARTMENT, count(WORKER_ID) No_Of_Workers 
FROM `Worker`
GROUP BY DEPARTMENT 
ORDER BY No_Of_Workers DESC;
-- SQLBook: Code
#Write an SQL query to print details of the Workers who are also Managers.
SELECT DISTINCT W.FIRST_NAME, T.WORKER_TITLE
FROM Worker W
INNER JOIN Title T
ON W.WORKER_ID = T.WORKER_REF_ID
AND T.WORKER_TITLE in ('Manager');
-- SQLBook: Code
#Write an SQL query to fetch duplicate records having matching data in some fields of a table.
SELECT WORKER_TITLE, AFFECTED_FROM, COUNT(*)
FROM Title
GROUP BY WORKER_TITLE, AFFECTED_FROM
HAVING COUNT(*) > 1;
-- SQLBook: Code
#Write an SQL query to show only odd rows from a table.
SELECT * FROM Worker WHERE MOD (WORKER_ID, 2) <> 0;
-- SQLBook: Code
# clone a table
CREATE TABLE WorkerClone LIKE Worker;
-- SQLBook: Code
#Write an SQL query to fetch intersecting records of two tables.
(SELECT * FROM Worker)
INTERSECT
(SELECT * FROM WorkerClone);

-- SQLBook: Code
#Write an SQL query to show records from one table that another table does not have.
SELECT * FROM Worker
MINUS
SELECT * FROM Title;
-- SQLBook: Code
#Write an SQL query to show the current date and time.
SELECT CURDATE();
-- SQLBook: Code
SELECT NOW();
-- SQLBook: Code
#Write an SQL query to show the top n (say 10) records of a table.
SELECT * FROM Worker ORDER BY Salary DESC LIMIT 10;
-- SQLBook: Code
#Write an SQL query to determine the 5th highest salary without using the TOP or limit method.
SELECT Salary
FROM Worker W1
WHERE 4 = (
 SELECT COUNT( DISTINCT ( W2.Salary ) )
 FROM Worker W2
 WHERE W2.Salary >= W1.Salary
 );
-- SQLBook: Code
#Write an SQL query to fetch the list of employees with the same salary.
Select distinct W.WORKER_ID, W.FIRST_NAME, W.Salary 
from Worker W, Worker W1 
where W.Salary = W1.Salary 
and W.WORKER_ID != W1.WORKER_ID;
-- SQLBook: Code
#Write an SQL query to show the second-highest salary from a table.
-- SQLBook: Code
Select max(Salary) from Worker 
where Salary not in (Select max(Salary) from Worker);
-- SQLBook: Code
#Write an SQL query to show one row twice in the results from a table.
select FIRST_NAME, DEPARTMENT from Worker W where W.DEPARTMENT='HR' 
union all 
select FIRST_NAME, DEPARTMENT from Worker W1 where W1.DEPARTMENT='HR';
-- SQLBook: Code
#Write an SQL query to fetch the first 50% of records from a table.
SELECT *
FROM `Worker`
WHERE WORKER_ID <= (SELECT count(WORKER_ID)/2 from Worker);
-- SQLBook: Code
#Write an SQL query to fetch the departments that have less than three people in them.
SELECT DEPARTMENT, COUNT(WORKER_ID) as 'Number of Workers' FROM Worker GROUP BY DEPARTMENT HAVING COUNT(WORKER_ID) < 3;
-- SQLBook: Code
# Write an SQL query to show all departments along with the number of people in there.
SELECT DEPARTMENT, COUNT(DEPARTMENT) as 'Number of Workers' FROM Worker GROUP BY DEPARTMENT;
-- SQLBook: Code
#Write an SQL query to show the last record from a table.
Select * from Worker where WORKER_ID = (SELECT max(WORKER_ID) from Worker);
-- SQLBook: Code
#Write an SQL query to fetch the first row of a table.
Select * from Worker where WORKER_ID = (SELECT MIN(WORKER_ID) from Worker);

-- SQLBook: Code
#Write an SQL query to fetch the last five records from a table.
SELECT * FROM Worker WHERE WORKER_ID <=5
UNION
SELECT * FROM (SELECT * FROM Worker W order by W.WORKER_ID DESC) AS W1 WHERE W1.WORKER_ID <=5;
-- SQLBook: Code
#Write an SQL query to print the name of employees having the highest salary in each department.
SELECT t.DEPARTMENT,t.FIRST_NAME,t.Salary from(SELECT max(Salary) as TotalSalary,DEPARTMENT from Worker group by DEPARTMENT) as TempNew 
Inner Join Worker t on TempNew.DEPARTMENT=t.DEPARTMENT 
 and TempNew.TotalSalary=t.Salary;
-- SQLBook: Code
#Write an SQL query to fetch three max salaries from a table.
SELECT distinct Salary from Worker a WHERE 3 >= (SELECT count(distinct Salary) from Worker b WHERE a.Salary <= b.Salary) order by a.Salary desc;
-- SQLBook: Code
#Write an SQL query to fetch three min salaries from a table.
SELECT distinct Salary from Worker a WHERE 3 >= (SELECT count(distinct Salary) from Worker b WHERE a.Salary >= b.Salary) order by a.Salary desc;
-- SQLBook: Code
#Write an SQL query to fetch 5th max salaries from a table.
SELECT distinct Salary from Worker a WHERE 5>= (SELECT count(distinct Salary) from Worker b WHERE a.Salary <= b.Salary) order by a.Salary desc;
-- SQLBook: Code
#Write an SQL query to fetch departments along with the total salaries paid for each of them.
SELECT DEPARTMENT, sum(Salary) from Worker group by DEPARTMENT;
-- SQLBook: Code
#Write an SQL query to fetch the names of workers who earn the highest salary.
SELECT FIRST_NAME, SALARY from Worker WHERE SALARY=(SELECT max(SALARY) from Worker);